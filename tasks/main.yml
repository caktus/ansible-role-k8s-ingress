---
# Sanity check so we don't accidentally remove all access to the cluster on AWS:
- when: (k8s_cluster_type == "aws") and (k8s_iam_users|length == 0)
  ansible.builtin.fail:
    msg: "Set k8s_iam_users to a list of IAM usernames who should have access to manage the cluster"

- name: Remove cert-manager
  kubernetes.core.k8s:
    context: "{{ k8s_context|mandatory }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
    wait: yes
    definition: "{{ lookup('template', 'cert-manager.yaml') }}"
    state: absent
  when: k8s_purge_cert_manager

- name: Remove ingress-nginx
  kubernetes.core.k8s:
    context: "{{ k8s_context|mandatory }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
    wait: yes
    definition: "{{ lookup('template', 'ingress-nginx/mandatory.yaml') }}"
    state: absent
  when: k8s_purge_ingress_controller

- name: Apply Descheduler Helm chart
  kubernetes.core.helm:
    context: "{{ k8s_context|mandatory }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
    chart_repo_url: https://kubernetes-sigs.github.io/descheduler/
    chart_ref: descheduler
    chart_version: "{{ k8s_descheduler_chart_version }}"
    release_name: descheduler
    release_namespace: "kube-system"
    release_values: "{{ k8s_descheduler_release_values }}"
    wait: yes
  when: k8s_install_descheduler

- name: Create ingress-nginx namespace
  kubernetes.core.k8s:
    context: "{{ k8s_context|mandatory }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
    name: "{{ k8s_ingress_nginx_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  when: k8s_install_ingress_controller

- name: Create cert-manager namespace
  kubernetes.core.k8s:
    context: "{{ k8s_context|mandatory }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
    name: "{{ k8s_cert_manager_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  when: k8s_install_cert_manager

- name: Add ingress-nginx Helm chart
  kubernetes.core.helm:
    context: "{{ k8s_context|mandatory }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
    chart_repo_url: "https://kubernetes.github.io/ingress-nginx"
    chart_ref: ingress-nginx
    # https://github.com/kubernetes/ingress-nginx/tags
    chart_version: "{{ k8s_ingress_nginx_chart_version }}"
    release_name: ingress-nginx
    release_namespace: "{{ k8s_ingress_nginx_namespace }}"
    release_values: "{{ (lookup('template', 'ingress-nginx/chart-values-%s.yaml' % k8s_cluster_type) | from_yaml) or omit }}"
    wait: yes
  when: k8s_install_ingress_controller

- name: Add cert-manager Helm chart
  kubernetes.core.helm:
    context: "{{ k8s_context|mandatory }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
    chart_repo_url: "https://charts.jetstack.io"
    chart_ref: cert-manager
    chart_version: "{{ k8s_cert_manager_chart_version }}"
    release_name: cert-manager
    release_namespace: "{{ k8s_cert_manager_namespace }}"
    release_values:
      installCRDs: "true"
    wait: yes
  when: k8s_install_cert_manager

- name: Deploy Let's Encrypt issuers
  kubernetes.core.k8s:
    context: "{{ k8s_context|mandatory }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
    wait: yes
    # cert-manager's custom resource definitions don't validate,
    # so this is disabled for now.
    # validate:
    #   fail_on_error: yes
    #   strict: yes
    definition: "{{ lookup('template', 'letsencrypt/issuers.yaml') }}"
  when: k8s_install_cert_manager

- name: Grant access to IAM users if aws
  when: k8s_cluster_type == "aws"
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'aws/cluster-auth.yaml') }}"
    context: "{{ k8s_context }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
    state: present
    wait: yes
    validate:
      fail_on_error: yes
      strict: yes
